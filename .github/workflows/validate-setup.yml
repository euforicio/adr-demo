name: Validate ADR Setup

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        
    - name: Validate ADR Structure
      run: |
        echo "🔍 Validating ADR repository structure..."
        
        # Check critical files exist
        critical_files=(
          "main.go"
          "go.mod"
          "go.sum"
          "templates/base.html"
          "templates/index.html"
          "templates/adr.html"
          "templates/search.html"
          "templates/docs.html"
          "static/js/main.js"
          "static/css/main.css"
          "adr/template.md"
          "README.md"
        )
        
        missing_files=()
        for file in "${critical_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "❌ Missing critical files:"
          printf '   %s\n' "${missing_files[@]}"
          exit 1
        fi
        
        echo "✅ All critical files present"
        
    - name: Build and Test Go Application
      run: |
        echo "🔨 Building Go application..."
        go mod download
        go build -o adr-gen .
        chmod +x adr-gen
        
        echo "📄 Validating ADR files..."
        ./adr-gen validate
        
        echo "🏗️ Testing static site generation..."
        ./adr-gen build --output docs --base-url "" --minify
        
        # Verify critical generated files
        required_files=(
          "docs/index.html"
          "docs/search.html"
          "docs/search-index.json"
          "docs/static/css/main.css"
          "docs/static/js/main.js"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing generated file: $file"
            exit 1
          fi
          echo "✅ Found: $file"
        done
        
        # Validate search index JSON
        if command -v jq >/dev/null 2>&1; then
          if ! jq . docs/search-index.json >/dev/null; then
            echo "❌ Generated search index JSON is invalid"
            exit 1
          fi
          echo "✅ Generated valid search index JSON"
        fi
        
    - name: Test Web Application
      run: |
        echo "🌐 Testing web application structure..."
        
        # Check that JavaScript files are valid
        for js_file in docs/static/js/*.js; do
          if [ -f "$js_file" ]; then
            # Basic syntax check - look for obvious syntax errors
            if grep -q "unexpected token\|syntax error\|unterminated string" "$js_file" 2>/dev/null; then
              echo "❌ Potential syntax error in $js_file"
              exit 1
            fi
          fi
        done
        
        # Check CSS files
        for css_file in docs/static/css/*.css; do
          if [ -f "$css_file" ]; then
            # Basic CSS validation - check for unclosed brackets
            if [ "$(grep -c '{' "$css_file")" -ne "$(grep -c '}' "$css_file")" ]; then
              echo "⚠️  Mismatched brackets in $css_file"
            fi
          fi
        done
        
        # Test that the documentation feature files exist
        if [ -f "templates/docs.html" ]; then
          echo "✅ Documentation template found"
        else
          echo "❌ Documentation template missing"
          exit 1
        fi
        
        echo "✅ Web application files appear valid"
        
    - name: Show Repository Statistics
      run: |
        echo "📊 Repository Statistics"
        echo "======================="
        
        adr_count=$(find adr -name "[0-9][0-9][0-9][0-9]-*.md" | wc -l | tr -d ' ')
        echo "Total ADRs: $adr_count"
        
        generated_html_count=$(find docs -name "adr-[0-9][0-9][0-9][0-9].html" | wc -l | tr -d ' ')
        echo "Generated HTML files: $generated_html_count"
        
        if command -v jq >/dev/null 2>&1 && [ -f "docs/search-index.json" ]; then
          echo "Status breakdown:"
          jq -r '.items | group_by(.status) | .[] | "\(.length) \(.[0].status)"' docs/search-index.json | sort
          
          echo ""
          echo "Diagram types:"
          jq -r '.items | group_by(.diagramType) | .[] | "\(.length) \(.[0].diagramType)"' docs/search-index.json | sort
        fi
        
        echo ""
        echo "✅ Validation completed successfully!"
        echo "🚀 Ready for deployment to GitHub Pages"
        echo "📖 Documentation feature enabled"